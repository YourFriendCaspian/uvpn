#!/bin/bash
#set -vx

## Construct client configuration files
## $1: name for client (optional, can be set in $name or will be asked)

[[ $- == *i* ]] && echo "ABORT: run as script, don't source" && return 1
((EUID)) && echo "ABORT: must have root privileges" && exit 2
self="$(readlink -e "$0")"

source ${self%/*}/vars

! [[ $name ]] && [[ $1 ]] && name=$1
while [[ ! $name ]] || [[ $name = server || $name = ta || $name = ca ]]
do
	read -p "Give proper client name: " name
done

! [[ $WAN ]] && echo "ABORT: WAN in vars must be set to external DNS/IP of the server" && exit 3
REMOTE=
for wan in $WAN
do
	IFS=':' read url port <<<"$wan"
  REMOTE+="remote $url $port"$'\n'
done

ovpn="$KEY_DIR/$name.ovpn"
cafile="$KEY_DIR/ca.crt"
tafile="$KEY_DIR/ta.key"
! [[ -f "$cafile" && -f "$tafile" ]] && echo "ABORT: first run ${self%/*}/build-server" && exit 4
ca=$(cat "$cafile")
ta=$(cat "$tafile" |grep -v '^#')

crtfile="$KEY_DIR/$name.crt"
keyfile="$KEY_DIR/$name.key"
! [[ -f "$crtfile" && -f "$keyfile" ]] && "$EASY_RSA/pkitool" "$name"
crt=$(sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' "$crtfile")
key=$(cat "$keyfile")
[[ -z $crt || -z $key ]] && echo "ABORT: certificate or key not generated" && exit 5

echo "client
dev tun
proto udp
${REMOTE}resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
; tls-version-min 1.2
key-direction 1
verify-x509-name $KEY_NAME name
cipher AES-256-CBC
auth SHA256
comp-lzo
verb 4
<ca>
$ca
</ca>
<cert>
$crt
</cert>
<key>
$key
</key>
<tls-auth>
$ta
</tls-auth>
" >"$ovpn"

echo "Done building $ovpn"

exit 0
